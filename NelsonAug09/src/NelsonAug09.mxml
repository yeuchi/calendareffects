<?xml version="1.0" encoding="utf-8"?>
<!-- 
	Module:			NelsonAug09
	
	Description:	August calendar effect, radial travel with a tweener.
					This is my experiment prior to RadialTileList implementation.
					
	Author:			C.T. Yeung		cty
	
	History:		written in last weekend of August 2009			cty
	
	Feel free to use this code in anyway you wish.  Credit is greatly appreciate, of course.
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
                xmlns:services="com.ctyeung.services.*"
                layout="absolute" 
                backgroundColor="0xFBD2F7"
                addedToStage="onAddedToStage()" viewSourceURL="srcview/index.html">
    <mx:Style>
        @font-face {
            src: local("Comic Sans MS");
            fontFamily: EmbeddedComicSansMS;
            fontWeight: normal;
        }
    </mx:Style>
    
        <mx:Script>
        <![CDATA[
        	import mx.effects.easing.Bounce;
        	import com.ctyeung.Effect.RotateEffect;
        	import com.ctyeung.Effect.CImage;
            import mx.effects.Parallel;
            import mx.events.EffectEvent;
            import mx.effects.Rotate;
            import mx.containers.Box;
            import mx.containers.VBox;
            import mx.containers.Canvas;
            import mx.controls.Image;
            import mx.containers.Panel;
            
            protected var index:int = 0;
            protected var imgList:Array;
            protected var posList:Array;
            protected var ptPanel:Point; 
            [Bindable]protected var _wid:int;
            [Bindable]protected var _len:int;
            [Bindable]protected var _thumbWid:int = 100;
            [Bindable]protected var _duration:int = 2000;
            protected var parallel:Parallel;
            protected var rotateIn:RotateEffect;
			protected var w:int;
			protected var h:int;
			
            protected function onAddedToStage():void
            {
            	posList = new Array();
            	ptPanel = new Point(5, 140);
                rotateIn  = new RotateEffect();
                //rotateIn.easingFunction = Bounce.easeOut;
                rotateIn.duration = 4000;
				w = Application.application.stage.width/2;
                h = Application.application.stage.height/2;                
            }

            private function onLoadCompleted(e:Event):void
            {
                imgList = photoService.imgList;    
                var img:CImage = imgList[index];
                img.id = index.toString();
                img.width = _thumbWid;
                img.height = _thumbWid;
                img.buttonMode=true;
                img.useHandCursor=true;
                
                img.addEventListener(MouseEvent.CLICK, onClickImage);
                img.addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);
                img.addEventListener(MouseEvent.MOUSE_OVER, onMouseOver);
                
                var center:Point = new Point(Application.application.stage.width/2,
                					  		 Application.application.stage.height/2);
                img.radius = distance(center, ptPanel);
                
                var quad:Number = findQuadrant(ptPanel, center);
                var angle:Number = getAngle(ptPanel, img.radius);
                switch(quad) {
                	case 1:
                		img.angle = 90 - angle;
                	break;
                	
                	case 2:
                		img.angle = 90 + angle;
                		break;
                		
                	case 3:
                		img.angle = 270 - angle;
                		break;
                		
                	case 4:
                		img.angle = -90 + angle;
                		break;
                }
                img.x = ptPanel.x;
				img.y = ptPanel.y;
				this.posList.push(new Point(ptPanel.x, ptPanel.y));
                this.addChildAt(img, 0);
                index ++;
                
                ptPanel.x += _thumbWid + 5;
				
				if ( ( ptPanel.x + _thumbWid ) >=  this.width ) {
					ptPanel.x = 5;
					ptPanel.y += _thumbWid + 5;
				}
				
                if ( index == photoService.photoFeed.length) {
                    index = 0;
                    onMoveStart();
                }
                _wid = this.width;
                _len = this.height;
            }
            
            protected function findQuadrant(ptPanel:Point, 
            								center:Point)
            								:int {
            	
            	if(ptPanel.x < center.x) {	// Quadrant 2, 3
            		if(ptPanel.y < center.y)
            			return 3;			// Quadrant 3
            		else 
            			return 2;
            	}
            	else {
            		if(ptPanel.y < center.y)// Quadrant 4
            			return 4;
            		else
            			return 1;			// Quadrant 1
            	}
            }
            
            protected function getAngle(pt:Point, radius:Number):Number {
            	var opp:Number = pt.x - Application.application.stage.width/2;
            	opp = (opp<0)?opp*-1:opp;
            	var angle:Number = Math.asin(opp/radius);
            	return toDegree(angle);
            }
            
            protected function toDegree(radian:Number):Number {
            	return radian * 180 / Math.PI;
            }
            
            protected function distance(p1:Point, p2:Point):Number
            {
            	var dis:Number = Math.sqrt(	Math.pow(p1.y-p2.y, 2) + 
            								Math.pow(p1.x-p2.x, 2));
            	return dis;
            }
            
            protected function toRadian(degree:Number):Number
	        {
	            return Math.PI / 180 * degree;
	        }
            
            private function onMouseOut(e:MouseEvent):void
            {
                var img:Image = e.currentTarget as Image;
                img.alpha = 1;
            }
            
            private function onMouseOver(e:MouseEvent):void
            {
                var img:Image = e.currentTarget as Image;
                img.alpha = .6;
            }
            
            private function onMoveStart():void
            {
                parallel = new Parallel();
                parallel.addEventListener(EffectEvent.EFFECT_END, onReStart);
                
                if ( index >= imgList.length)
                    index =0;
                
                this.setChildIndex(imgList[index], this.numChildren-1);
                var last:int = (index>=imgList.length)?0:index;
                
                var img:CImage = imgList[last] as CImage;
                rotateIn.target = img;
                rotateIn.posFrom = new Array(img.angle,img.radius);
                rotateIn.posTo = new Array(img.angle+360,img.radius);
                parallel.addChild(rotateIn);
                parallel.end();
                parallel.play();
                
                index ++;
            }
            
            private function onReStart(e:Event):void
            {
                var i:int = (index==0)?imgList.length-1:index-1;
                var img:CImage = imgList[i] as CImage;
                img.width = this._thumbWid;
                img.height = this._thumbWid;
                var pt:Point = this.posList[parseInt(img.id)];  
                img.x = pt.x;
                img.y = pt.y;
                parallel.removeEventListener(EffectEvent.EFFECT_END, onReStart);
                onMoveStart();
            }
            
/////////////////////////////////////////////////////////////////////
// events
            
            private function onClickImage(e:MouseEvent):void
            {
                var img:CImage = e.currentTarget as CImage;
                var url:String = img.url;
                //url = url.toLowerCase();
                url = url.replace("thumb/", "big/");
                url = url.replace("Thumb", "");
                url = url.replace("jpg", "JPG");
                navigateToURL(new URLRequest(url), "_blank");
            }
            
            private function onClickSlideShow():void
            {
                navigateToURL(new URLRequest("http://www.ctyeung.com/flex/gallery/FlexEx1.html"), "_blank");
            }
            
            private function onMouseOverLabel():void
            {
                lblSlide.alpha = .5;
            }
            
            private function onMouseOutLabel():void
            {
                lblSlide.alpha = 1;
            }
        ]]>
    </mx:Script>
    
    <services:PhotoService id="photoService" loadCompleted="onLoadCompleted(event)"/>
    <mx:Canvas>
    <mx:Label id="lblMonth" text="August" 
                    fontSize="42" fontFamily="EmbeddedComicSansMS" color="0x9900FF" 
                    x="{this.width/2-lblMonth.width/2}" y="10"/>
    </mx:Canvas>
        <mx:Label     id="lblSlide" text="SlideShow" click="onClickSlideShow()" 
                    buttonMode="true" useHandCursor="true" x="10" y="20"
                    fontSize="20" fontFamily="EmbeddedComicSansMS" color="0x9900FF" 
                    mouseOut="onMouseOutLabel()" mouseOver="onMouseOverLabel()"/>
</mx:Application>